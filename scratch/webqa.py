"""
scratch/webqa.py
================

Async **WebQAModule** – one-stop shop for:

* evidence retrieval  → `brave_client.brave_snippets`
* evidence-grounded answer generation → `evidence_llm.answer_from_evidence`

The module does **not** judge *which* Q-A pair is best – that decision is left
to `qa_selector.batch_select`.

Typical usage from an async context
-----------------------------------

>>> module = WebQAModule(question, llm)
>>> record = await module.run()
>>> print(record["answer"])

Returned dict
-------------

{
"question": <str>,
"answer": <str>,
"snippets": <list[str]>,
"ok": <bool> # False if LLM failed or empty answer
}

pgsql
Copy
Edit
"""

from __future__ import annotations

import asyncio
import logging
from typing import Dict, List

from . import config as C
from .brave_client import brave_snippets
from .evidence_llm import answer_from_evidence

logger = logging.getLogger(__name__)

__all__ = ["WebQAModule"]


class WebQAModule:
    """
    Wraps one fact-checking question.

    Parameters
    ----------
    question
        A single, concise question string generated by `QAGenerationTool`.
    llm
        LangChain LLM instance (`ModelRouter.get()`).
    k
        Number of Brave snippets to fetch (defaults to `config.BRAVE_K`).
    """

    def __init__(self, question: str, llm, k: int = C.BRAVE_K) -> None:
        self.question = question
        self._llm = llm
        self.k = k

    # ------------------------------------------------------------------ #
    # Async execution
    # ------------------------------------------------------------------ #

    async def run(self) -> Dict[str, object]:
        """
        Coroutine that returns a record with the keys
        ``question, answer, snippets, ok``.
        """
        # 1) Evidence retrieval
        snippets: List[str]
        try:
            snippets = await brave_snippets(self.question, k=self.k)
        except Exception as exc:  # noqa: BLE001
            logger.error("Brave API failed for %r: %s", self.question, exc)
            return {
                "question": self.question,
                "answer": f"Brave error: {exc}",
                "snippets": [],
                "ok": False,
            }

        # 2) Answer generation bound to evidence
        answer, ok = answer_from_evidence(self._llm, self.question, snippets)

        return {
            "question": self.question,
            "answer": answer,
            "snippets": snippets,
            "ok": ok,
        }

    # ------------------------------------------------------------------ #
    # Synchronous convenience wrapper
    # ------------------------------------------------------------------ #

    def run_sync(self) -> Dict[str, object]:
        """
        Blocking helper for REPL / tests.

        Warning
        -------
        Do **not** call this inside an already-running event loop
        (e.g. within `asyncio.run()` or Jupyter notebooks) – use `await run()`.
        """
        return asyncio.run(self.run())